{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let TreatchelateurComponent = class TreatchelateurComponent {\n  constructor(treatChelateurService, chelateurService) {\n    this.treatChelateurService = treatChelateurService;\n    this.chelateurService = chelateurService;\n    this.chelateurs = [];\n    this.traitements = [];\n    this.traitementChelateurReçuMap = {};\n  }\n  ngOnInit() {\n    this.loadChelateurs();\n  }\n  loadChelateurs() {\n    this.chelateurService.getChelateurs().subscribe(data => {\n      this.chelateurs = data;\n    }, error => {\n      console.error('Error fetching chelateurs', error);\n    });\n  }\n  onChelateurChange(event) {\n    const chelateurId = +event.target.value;\n    const isChecked = event.target.checked;\n    if (isChecked) {\n      const newTraitement = this.getTraitementByChelateurId(chelateurId);\n      this.traitements.push(newTraitement);\n    } else {\n      this.traitements = this.traitements.filter(traitement => traitement.ChelateurId !== chelateurId);\n      delete this.traitementChelateurReçuMap[chelateurId];\n    }\n  }\n  getTraitementByChelateurId(chelateurId) {\n    if (!this.traitementChelateurReçuMap[chelateurId]) {\n      this.traitementChelateurReçuMap[chelateurId] = {\n        Observance: '',\n        Posologie: 0,\n        Depuis: 0,\n        Voie: '',\n        VisiteId: 0,\n        ChelateurId: chelateurId\n      };\n    }\n    return this.traitementChelateurReçuMap[chelateurId];\n  }\n  onSubmit() {\n    this.traitements.forEach(traitement => {\n      this.treatChelateurService.add(traitement).subscribe(response => {\n        if (response.status === 200 || response.status === 201) {\n          console.log('Traitement added successfully', response);\n        } else {\n          console.error('Unexpected response status', response.status);\n        }\n      }, error => {\n        console.error('Error adding Traitement', error);\n        if (error.status === 400 && error.error && error.error.errors) {\n          console.error('Validation Errors:', error.error.errors);\n        }\n      });\n    });\n  }\n};\nTreatchelateurComponent = __decorate([Component({\n  selector: 'app-treatchelateur',\n  templateUrl: './treatchelateur.component.html',\n  styleUrls: ['./treatchelateur.component.css']\n})], TreatchelateurComponent);","map":{"version":3,"names":["Component","TreatchelateurComponent","constructor","treatChelateurService","chelateurService","chelateurs","traitements","traitementChelateurReçuMap","ngOnInit","loadChelateurs","getChelateurs","subscribe","data","error","console","onChelateurChange","event","chelateurId","target","value","isChecked","checked","newTraitement","getTraitementByChelateurId","push","filter","traitement","ChelateurId","Observance","Posologie","Depuis","Voie","VisiteId","onSubmit","forEach","add","response","status","log","errors","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\elabe\\Desktop\\ThalassemiaFront\\src\\app\\pages\\treatchelateur\\treatchelateur.component.ts"],"sourcesContent":["import { HttpResponse } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Chelateur } from 'src/app/models/Chelateur';\r\nimport { TraitementChelateurReçu } from 'src/app/models/TraitementChelateurReçu';\r\nimport { ChelateurServiceService } from 'src/app/services/chelateur-service.service';\r\nimport { TreatChelateurService } from 'src/app/services/treat-chelateur.service';\r\n\r\n@Component({\r\n  selector: 'app-treatchelateur',\r\n  templateUrl: './treatchelateur.component.html',\r\n  styleUrls: ['./treatchelateur.component.css']\r\n})\r\nexport class TreatchelateurComponent implements OnInit {\r\n  chelateurs: Chelateur[] = [];\r\n  traitements: TraitementChelateurReçu[] = [];\r\n  traitementChelateurReçuMap: { [key: number]: TraitementChelateurReçu } = {};\r\n\r\n  constructor(\r\n    private treatChelateurService: TreatChelateurService,\r\n    private chelateurService: ChelateurServiceService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.loadChelateurs();\r\n  }\r\n\r\n  loadChelateurs() {\r\n    this.chelateurService.getChelateurs().subscribe(\r\n      (data: Chelateur[]) => {\r\n        this.chelateurs = data;\r\n      },\r\n      error => {\r\n        console.error('Error fetching chelateurs', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  \r\n\r\n  onChelateurChange(event: any) {\r\n    const chelateurId = +event.target.value;\r\n    const isChecked = event.target.checked;\r\n  \r\n    if (isChecked) {\r\n      const newTraitement = this.getTraitementByChelateurId(chelateurId);\r\n      this.traitements.push(newTraitement);\r\n    } else {\r\n      this.traitements = this.traitements.filter(traitement => traitement.ChelateurId !== chelateurId);\r\n      delete this.traitementChelateurReçuMap[chelateurId];\r\n    }\r\n  }\r\n  \r\n  getTraitementByChelateurId(chelateurId: number): TraitementChelateurReçu {\r\n    if (!this.traitementChelateurReçuMap[chelateurId]) {\r\n      this.traitementChelateurReçuMap[chelateurId] = {\r\n        Observance: '',\r\n        Posologie: 0,\r\n        Depuis: 0,\r\n        Voie: '',\r\n        VisiteId: 0,\r\n        ChelateurId: chelateurId\r\n      };\r\n    }\r\n    return this.traitementChelateurReçuMap[chelateurId];\r\n  }\r\n  \r\n  onSubmit() {\r\n    this.traitements.forEach(traitement => {\r\n      this.treatChelateurService.add(traitement).subscribe(\r\n        (response: HttpResponse<any>) => {\r\n          if (response.status === 200 || response.status === 201) {\r\n            console.log('Traitement added successfully', response);\r\n          } else {\r\n            console.error('Unexpected response status', response.status);\r\n          }\r\n        },\r\n        error => {\r\n          console.error('Error adding Traitement', error);\r\n          if (error.status === 400 && error.error && error.error.errors) {\r\n            console.error('Validation Errors:', error.error.errors);\r\n          }\r\n        }\r\n      );\r\n    });\r\n  }\r\n  \r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}