{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { TraitementChelateurReçu } from 'src/app/models/TraitementChelateurReçu';\nexport let TreatchelateurComponent = class TreatchelateurComponent {\n  constructor(chelateurService, treatChelateurService) {\n    this.chelateurService = chelateurService;\n    this.treatChelateurService = treatChelateurService;\n    this.chelateurs = [];\n    this.traitements = [];\n    this.selectedChelateurs = new Set();\n  }\n  ngOnInit() {\n    this.loadChelateurs();\n  }\n  loadChelateurs() {\n    this.chelateurService.getChelateurs().subscribe(data => {\n      this.chelateurs = data;\n    });\n  }\n  onChelateurChange(event) {\n    const chelateurId = +event.target.value;\n    const isChecked = event.target.checked;\n    if (isChecked) {\n      this.selectedChelateurs.add(chelateurId);\n      const newTraitement = new TraitementChelateurReçu();\n      newTraitement.ChelateurId = chelateurId;\n      this.traitements.push(newTraitement);\n    } else {\n      this.selectedChelateurs.delete(chelateurId);\n      this.traitements = this.traitements.filter(traitement => traitement.ChelateurId !== chelateurId);\n    }\n  }\n  isFormVisible(chelateurId) {\n    return this.selectedChelateurs.has(chelateurId);\n  }\n  getTraitementByChelateurId(chelateurId) {\n    return this.traitements.find(traitement => traitement.ChelateurId === chelateurId);\n  }\n  onSubmit() {\n    this.traitements.forEach(traitement => {\n      this.treatChelateurService.add(traitement).subscribe(response => {\n        console.log('Traitement added successfully', response);\n      }, error => {\n        console.error('Error adding traitement', error);\n      });\n    });\n  }\n};\nTreatchelateurComponent = __decorate([Component({\n  selector: 'app-treatchelateur',\n  templateUrl: './treatchelateur.component.html',\n  styleUrls: ['./treatchelateur.component.css']\n})], TreatchelateurComponent);","map":{"version":3,"names":["Component","TraitementChelateurReçu","TreatchelateurComponent","constructor","chelateurService","treatChelateurService","chelateurs","traitements","selectedChelateurs","Set","ngOnInit","loadChelateurs","getChelateurs","subscribe","data","onChelateurChange","event","chelateurId","target","value","isChecked","checked","add","newTraitement","ChelateurId","push","delete","filter","traitement","isFormVisible","has","getTraitementByChelateurId","find","onSubmit","forEach","response","console","log","error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\elabe\\Desktop\\ThalassemiaFront\\src\\app\\pages\\treatchelateur\\treatchelateur.component.ts"],"sourcesContent":["import { HttpResponse } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Chelateur } from 'src/app/models/Chelateur';\r\nimport { TraitementChelateurReçu } from 'src/app/models/TraitementChelateurReçu';\r\nimport { ChelateurServiceService } from 'src/app/services/chelateur-service.service';\r\nimport { TreatChelateurService } from 'src/app/services/treat-chelateur.service';\r\n\r\n@Component({\r\n  selector: 'app-treatchelateur',\r\n  templateUrl: './treatchelateur.component.html',\r\n  styleUrls: ['./treatchelateur.component.css']\r\n})\r\n  export class TreatchelateurComponent implements OnInit {\r\n    chelateurs: Chelateur[] = [];\r\n    traitements: TraitementChelateurReçu[] = [];\r\n    selectedChelateurs: Set<number> = new Set();\r\n  \r\n    constructor(\r\n      private chelateurService: ChelateurServiceService,\r\n      private treatChelateurService: TreatChelateurService\r\n    ) { }\r\n  \r\n    ngOnInit(): void {\r\n      this.loadChelateurs();\r\n    }\r\n  \r\n    loadChelateurs() {\r\n      this.chelateurService.getChelateurs().subscribe(data => {\r\n        this.chelateurs = data;\r\n      });\r\n    }\r\n  \r\n    onChelateurChange(event: any) {\r\n      const chelateurId = +event.target.value;\r\n      const isChecked = event.target.checked;\r\n  \r\n      if (isChecked) {\r\n        this.selectedChelateurs.add(chelateurId);\r\n        const newTraitement = new TraitementChelateurReçu();\r\n        newTraitement.ChelateurId = chelateurId;\r\n        this.traitements.push(newTraitement);\r\n      } else {\r\n        this.selectedChelateurs.delete(chelateurId);\r\n        this.traitements = this.traitements.filter(traitement => traitement.ChelateurId !== chelateurId);\r\n      }\r\n    }\r\n  \r\n    isFormVisible(chelateurId: number): boolean {\r\n      return this.selectedChelateurs.has(chelateurId);\r\n    }\r\n  \r\n    getTraitementByChelateurId(chelateurId: number): TraitementChelateurReçu | undefined {\r\n      return this.traitements.find(traitement => traitement.ChelateurId === chelateurId);\r\n    }\r\n  \r\n    onSubmit() {\r\n      this.traitements.forEach(traitement => {\r\n        this.treatChelateurService.add(traitement).subscribe(\r\n          response => {\r\n            console.log('Traitement added successfully', response);\r\n          },\r\n          error => {\r\n            console.error('Error adding traitement', error);\r\n          }\r\n        );\r\n      });\r\n    }\r\n  }"],"mappings":";AACA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SAASC,uBAAuB,QAAQ,wCAAwC;AASvE,WAAMC,uBAAuB,GAA7B,MAAMA,uBAAuB;EAKlCC,YACUC,gBAAyC,EACzCC,qBAA4C;IAD5C,KAAAD,gBAAgB,GAAhBA,gBAAgB;IAChB,KAAAC,qBAAqB,GAArBA,qBAAqB;IAN/B,KAAAC,UAAU,GAAgB,EAAE;IAC5B,KAAAC,WAAW,GAA8B,EAAE;IAC3C,KAAAC,kBAAkB,GAAgB,IAAIC,GAAG,EAAE;EAKvC;EAEJC,QAAQA,CAAA;IACN,IAAI,CAACC,cAAc,EAAE;EACvB;EAEAA,cAAcA,CAAA;IACZ,IAAI,CAACP,gBAAgB,CAACQ,aAAa,EAAE,CAACC,SAAS,CAACC,IAAI,IAAG;MACrD,IAAI,CAACR,UAAU,GAAGQ,IAAI;IACxB,CAAC,CAAC;EACJ;EAEAC,iBAAiBA,CAACC,KAAU;IAC1B,MAAMC,WAAW,GAAG,CAACD,KAAK,CAACE,MAAM,CAACC,KAAK;IACvC,MAAMC,SAAS,GAAGJ,KAAK,CAACE,MAAM,CAACG,OAAO;IAEtC,IAAID,SAAS,EAAE;MACb,IAAI,CAACZ,kBAAkB,CAACc,GAAG,CAACL,WAAW,CAAC;MACxC,MAAMM,aAAa,GAAG,IAAItB,uBAAuB,EAAE;MACnDsB,aAAa,CAACC,WAAW,GAAGP,WAAW;MACvC,IAAI,CAACV,WAAW,CAACkB,IAAI,CAACF,aAAa,CAAC;KACrC,MAAM;MACL,IAAI,CAACf,kBAAkB,CAACkB,MAAM,CAACT,WAAW,CAAC;MAC3C,IAAI,CAACV,WAAW,GAAG,IAAI,CAACA,WAAW,CAACoB,MAAM,CAACC,UAAU,IAAIA,UAAU,CAACJ,WAAW,KAAKP,WAAW,CAAC;;EAEpG;EAEAY,aAAaA,CAACZ,WAAmB;IAC/B,OAAO,IAAI,CAACT,kBAAkB,CAACsB,GAAG,CAACb,WAAW,CAAC;EACjD;EAEAc,0BAA0BA,CAACd,WAAmB;IAC5C,OAAO,IAAI,CAACV,WAAW,CAACyB,IAAI,CAACJ,UAAU,IAAIA,UAAU,CAACJ,WAAW,KAAKP,WAAW,CAAC;EACpF;EAEAgB,QAAQA,CAAA;IACN,IAAI,CAAC1B,WAAW,CAAC2B,OAAO,CAACN,UAAU,IAAG;MACpC,IAAI,CAACvB,qBAAqB,CAACiB,GAAG,CAACM,UAAU,CAAC,CAACf,SAAS,CAClDsB,QAAQ,IAAG;QACTC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEF,QAAQ,CAAC;MACxD,CAAC,EACDG,KAAK,IAAG;QACNF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD,CAAC,CACF;IACH,CAAC,CAAC;EACJ;CACD;AAvDYpC,uBAAuB,GAAAqC,UAAA,EALrCvC,SAAS,CAAC;EACTwC,QAAQ,EAAE,oBAAoB;EAC9BC,WAAW,EAAE,iCAAiC;EAC9CC,SAAS,EAAE,CAAC,gCAAgC;CAC7C,CAAC,C,EACaxC,uBAAuB,CAuDnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}