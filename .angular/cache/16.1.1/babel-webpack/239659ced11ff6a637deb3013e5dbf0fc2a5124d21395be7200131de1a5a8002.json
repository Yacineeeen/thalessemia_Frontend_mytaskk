{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/compfoie.service\";\nimport * as i2 from \"@angular/router\";\nexport class UpdatecompfoieComponent {\n  constructor(CompfoieService, router, route) {\n    this.CompfoieService = CompfoieService;\n    this.router = router;\n    this.route = route;\n    this.ComplicationFoie = {};\n    this.errorMessage = '';\n  }\n  ngOnInit() {\n    this.route.paramMap.subscribe(params => {\n      const PatientID = params.get('PatientID');\n      if (PatientID) {\n        const id = parseInt(PatientID, 10);\n        if (!isNaN(id)) {\n          this.getComplicationCoeurById(id);\n        } else {\n          console.error('Invalid patient ID:', PatientID);\n        }\n      } else {\n        console.error('Patient ID is missing in route');\n      }\n    });\n  }\n  getComplicationCoeurById(id) {\n    this.CompfoieService.getComplicationCoeurById(id).subscribe(data => {\n      this.ComplicationFoie = data;\n      // Optionally log the data to ensure it's correctly set\n      console.log('Formatted data:', this.ComplicationFoie);\n      this.ComplicationFoie.dateEchocardiographie = this.formatDate(this.ComplicationFoie.dateEchocardiographie);\n      console.log(\"testt date \");\n      console.log(this.ComplicationFoie.dateEchocardiographie);\n    }, error => {\n      this.errorMessage = error.message;\n      console.error('Error fetching complication data:', error);\n    });\n  }\n  formatDate(dateString) {\n    const date = new Date(dateString);\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-based\n    const year = date.getFullYear();\n    return `${year}-${month}-${day}`;\n  }\n  onSubmit() {\n    const patientID = parseInt(this.route.snapshot.paramMap.get('PatientID'), 10);\n    if (!isNaN(patientID)) {\n      this.CompfoieService.update(patientID, this.ComplicationFoie).subscribe(response => {\n        console.log('Update successful', response);\n        //this.router.navigate(['/']); // Adjust this to your desired route after successful update\n      }, error => {\n        this.errorMessage = error.message;\n        console.error('Error updating complication data:', error);\n      });\n    } else {\n      console.error('Invalid patient ID:', patientID);\n    }\n  }\n}\nUpdatecompfoieComponent.ɵfac = function UpdatecompfoieComponent_Factory(t) {\n  return new (t || UpdatecompfoieComponent)(i0.ɵɵdirectiveInject(i1.CompfoieService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\nUpdatecompfoieComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UpdatecompfoieComponent,\n  selectors: [[\"app-updatecompfoie\"]],\n  decls: 2,\n  vars: 0,\n  template: function UpdatecompfoieComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"updatecompfoie works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["UpdatecompfoieComponent","constructor","CompfoieService","router","route","ComplicationFoie","errorMessage","ngOnInit","paramMap","subscribe","params","PatientID","get","id","parseInt","isNaN","getComplicationCoeurById","console","error","data","log","dateEchocardiographie","formatDate","message","dateString","date","Date","day","String","getDate","padStart","month","getMonth","year","getFullYear","onSubmit","patientID","snapshot","update","response","i0","ɵɵdirectiveInject","i1","i2","Router","ActivatedRoute","selectors","decls","vars","template","UpdatecompfoieComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\elabe\\Desktop\\ThalassemiaFront\\src\\app\\pages\\updatecompfoie\\updatecompfoie.component.ts","C:\\Users\\elabe\\Desktop\\ThalassemiaFront\\src\\app\\pages\\updatecompfoie\\updatecompfoie.component.html"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { ComplicationFoie } from 'src/app/models/ComplicationFoie';\r\nimport { CompfoieService } from 'src/app/services/compfoie.service';\r\n\r\n@Component({\r\n  selector: 'app-updatecompfoie',\r\n  templateUrl: './updatecompfoie.component.html',\r\n  styleUrls: ['./updatecompfoie.component.css']\r\n})\r\nexport class UpdatecompfoieComponent {\r\n  ComplicationFoie: any= {};\r\n  errorMessage: string = '';\r\n\r\n  constructor(\r\n    private CompfoieService: CompfoieService,\r\n    private router: Router,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  \r\n  ngOnInit(): void {\r\n    this.route.paramMap.subscribe(params => {\r\n      const PatientID = params.get('PatientID');\r\n      if (PatientID) {\r\n        const id = parseInt(PatientID, 10);\r\n        if (!isNaN(id)) {\r\n          this.getComplicationCoeurById(id);\r\n        } else {\r\n          console.error('Invalid patient ID:', PatientID);\r\n        }\r\n      } else {\r\n        console.error('Patient ID is missing in route');\r\n      }\r\n    });\r\n  }\r\n  \r\n  \r\n  private getComplicationCoeurById(id: number) {\r\n    this.CompfoieService.getComplicationCoeurById(id).subscribe(\r\n      (data: ComplicationFoie) => {\r\n        this.ComplicationFoie = data;\r\n        // Optionally log the data to ensure it's correctly set\r\n        console.log('Formatted data:', this.ComplicationFoie);\r\n        this.ComplicationFoie.dateEchocardiographie = this.formatDate(this.ComplicationFoie.dateEchocardiographie);\r\nconsole.log(\"testt date \");\r\n       console.log(this.ComplicationFoie.dateEchocardiographie);\r\n      },\r\n      (error: HttpErrorResponse) => {\r\n        this.errorMessage = error.message;\r\n        console.error('Error fetching complication data:', error);\r\n      }\r\n    );\r\n  }\r\n  formatDate(dateString: string): string {\r\n    const date = new Date(dateString);\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-based\r\n    const year = date.getFullYear();\r\n    return `${year}-${month}-${day}`;\r\n  }\r\n  \r\n  \r\n\r\n  onSubmit() {\r\n    const patientID = parseInt(this.route.snapshot.paramMap.get('PatientID')!, 10);\r\n    if (!isNaN(patientID)) {\r\n        this.CompfoieService.update(patientID, this.ComplicationFoie).subscribe(\r\n            response => {\r\n                console.log('Update successful', response);\r\n                //this.router.navigate(['/']); // Adjust this to your desired route after successful update\r\n            },\r\n            (error: HttpErrorResponse) => {\r\n                this.errorMessage = error.message;\r\n                console.error('Error updating complication data:', error);\r\n            }\r\n        );\r\n    } else {\r\n        console.error('Invalid patient ID:', patientID);\r\n    }\r\n}\r\n\r\n}\r\n","<p>updatecompfoie works!</p>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}