{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ComplicationCrisesDouleureuse } from 'src/app/models/ComplicationCrisesDouleureuse';\nexport let CriseComponent = class CriseComponent {\n  constructor(CriseService) {\n    this.CriseService = CriseService;\n    this.crises = [new ComplicationCrisesDouleureuse()];\n    this.errorMessage = '';\n  }\n  formatDateToYYYYMMDD(date) {\n    return date.toISOString().split('T')[0];\n  }\n  addCriseForm() {\n    this.crises.push(new ComplicationCrisesDouleureuse());\n  }\n  onSubmit() {\n    const now = new Date();\n    this.crises.forEach(crise => {\n      crise.Date = crise.Date ? this.formatDateToYYYYMMDD(new Date(crise.Date)) : this.formatDateToYYYYMMDD(now);\n      // Convertir les dates en format ISO 8601 avant de les envoyer au backend\n      const complicationToSend = {\n        ...crise,\n        DateEchocardiographie: new Date(crise.Date).toISOString()\n      };\n      this.CriseService.addcrise(complicationToSend).subscribe(response => {\n        console.log('Complication added successfully', response);\n        this.errorMessage = '';\n      }, error => {\n        console.error('Error adding complication', error);\n        this.errorMessage = error.error.title;\n        if (error.error.errors) {\n          for (const [field, errors] of Object.entries(error.error.errors)) {\n            console.error(`Validation error for ${field}:`, errors);\n          }\n        }\n      });\n    });\n  }\n};\nCriseComponent = __decorate([Component({\n  selector: 'app-crise',\n  templateUrl: './crise.component.html',\n  styleUrls: ['./crise.component.css']\n})], CriseComponent);","map":{"version":3,"names":["Component","ComplicationCrisesDouleureuse","CriseComponent","constructor","CriseService","crises","errorMessage","formatDateToYYYYMMDD","date","toISOString","split","addCriseForm","push","onSubmit","now","Date","forEach","crise","complicationToSend","DateEchocardiographie","addcrise","subscribe","response","console","log","error","title","errors","field","Object","entries","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\elabe\\Desktop\\ThalassemiaFront\\src\\app\\pages\\crise\\crise.component.ts"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component } from '@angular/core';\r\nimport { ComplicationCrisesDouleureuse } from 'src/app/models/ComplicationCrisesDouleureuse';\r\nimport { CriseService } from 'src/app/services/crise.service';\r\n\r\n@Component({\r\n  selector: 'app-crise',\r\n  templateUrl: './crise.component.html',\r\n  styleUrls: ['./crise.component.css']\r\n})\r\nexport class CriseComponent {\r\n  crises: ComplicationCrisesDouleureuse[] = [new ComplicationCrisesDouleureuse()];\r\n  errorMessage: string = '';\r\n\r\n  constructor(private CriseService: CriseService) {}\r\n\r\n  private formatDateToYYYYMMDD(date: Date): string {\r\n    return date.toISOString().split('T')[0];\r\n  }\r\n\r\n  addCriseForm() {\r\n    this.crises.push(new ComplicationCrisesDouleureuse());\r\n  }\r\n\r\n  onSubmit() {\r\n    const now = new Date();\r\n\r\n    this.crises.forEach(crise => {\r\n      crise.Date = crise.Date ? this.formatDateToYYYYMMDD(new Date(crise.Date)) : this.formatDateToYYYYMMDD(now);\r\n\r\n      // Convertir les dates en format ISO 8601 avant de les envoyer au backend\r\n      const complicationToSend = {\r\n        ...crise,\r\n        DateEchocardiographie: new Date(crise.Date).toISOString(),\r\n      };\r\n\r\n      this.CriseService.addcrise(complicationToSend).subscribe(\r\n        response => {\r\n          console.log('Complication added successfully', response);\r\n          this.errorMessage = '';\r\n        },\r\n        (error: HttpErrorResponse) => {\r\n          console.error('Error adding complication', error);\r\n          this.errorMessage = error.error.title;\r\n          if (error.error.errors) {\r\n            for (const [field, errors] of Object.entries(error.error.errors)) {\r\n              console.error(`Validation error for ${field}:`, errors);\r\n            }\r\n          }\r\n        }\r\n      );\r\n    });\r\n  }\r\n}\r\n"],"mappings":";AACA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,6BAA6B,QAAQ,8CAA8C;AAQrF,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAIzBC,YAAoBC,YAA0B;IAA1B,KAAAA,YAAY,GAAZA,YAAY;IAHhC,KAAAC,MAAM,GAAoC,CAAC,IAAIJ,6BAA6B,EAAE,CAAC;IAC/E,KAAAK,YAAY,GAAW,EAAE;EAEwB;EAEzCC,oBAAoBA,CAACC,IAAU;IACrC,OAAOA,IAAI,CAACC,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACzC;EAEAC,YAAYA,CAAA;IACV,IAAI,CAACN,MAAM,CAACO,IAAI,CAAC,IAAIX,6BAA6B,EAAE,CAAC;EACvD;EAEAY,QAAQA,CAAA;IACN,MAAMC,GAAG,GAAG,IAAIC,IAAI,EAAE;IAEtB,IAAI,CAACV,MAAM,CAACW,OAAO,CAACC,KAAK,IAAG;MAC1BA,KAAK,CAACF,IAAI,GAAGE,KAAK,CAACF,IAAI,GAAG,IAAI,CAACR,oBAAoB,CAAC,IAAIQ,IAAI,CAACE,KAAK,CAACF,IAAI,CAAC,CAAC,GAAG,IAAI,CAACR,oBAAoB,CAACO,GAAG,CAAC;MAE1G;MACA,MAAMI,kBAAkB,GAAG;QACzB,GAAGD,KAAK;QACRE,qBAAqB,EAAE,IAAIJ,IAAI,CAACE,KAAK,CAACF,IAAI,CAAC,CAACN,WAAW;OACxD;MAED,IAAI,CAACL,YAAY,CAACgB,QAAQ,CAACF,kBAAkB,CAAC,CAACG,SAAS,CACtDC,QAAQ,IAAG;QACTC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEF,QAAQ,CAAC;QACxD,IAAI,CAAChB,YAAY,GAAG,EAAE;MACxB,CAAC,EACAmB,KAAwB,IAAI;QAC3BF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjD,IAAI,CAACnB,YAAY,GAAGmB,KAAK,CAACA,KAAK,CAACC,KAAK;QACrC,IAAID,KAAK,CAACA,KAAK,CAACE,MAAM,EAAE;UACtB,KAAK,MAAM,CAACC,KAAK,EAAED,MAAM,CAAC,IAAIE,MAAM,CAACC,OAAO,CAACL,KAAK,CAACA,KAAK,CAACE,MAAM,CAAC,EAAE;YAChEJ,OAAO,CAACE,KAAK,CAAC,wBAAwBG,KAAK,GAAG,EAAED,MAAM,CAAC;;;MAG7D,CAAC,CACF;IACH,CAAC,CAAC;EACJ;CACD;AA3CYzB,cAAc,GAAA6B,UAAA,EAL1B/B,SAAS,CAAC;EACTgC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACWhC,cAAc,CA2C1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}