{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserbackService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://localhost:7129/api/Users';\n  }\n  addUser(user) {\n    return this.http.post(`${this.apiUrl}/addUser`, user, {\n      observe: 'response'\n    });\n  }\n  getUsers() {\n    console.log(this.http.get(this.apiUrl));\n    return this.http.get(this.apiUrl);\n  }\n  GetRole() {\n    return this.http.get('https://localhost:7129/api/Users/get/role');\n  }\n  login(username, password) {\n    const body = {\n      username,\n      password\n    };\n    return this.http.post(`${this.apiUrl}/login`, body);\n  }\n  logout() {\n    localStorage.removeItem('authToken'); // Remove token when logging out\n    console.log('User logged out');\n  }\n  isLoggedIn() {\n    const token = localStorage.getItem('authToken');\n    if (!token) return false;\n    const expiry = JSON.parse(atob(token.split('.')[1])).exp; // Decode the token to get expiry\n    return Math.floor(new Date().getTime() / 1000) < expiry; // Check if current time is less than expiry\n  }\n}\n\nUserbackService.ɵfac = function UserbackService_Factory(t) {\n  return new (t || UserbackService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserbackService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserbackService,\n  factory: UserbackService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["UserbackService","constructor","http","apiUrl","addUser","user","post","observe","getUsers","console","log","get","GetRole","login","username","password","body","logout","localStorage","removeItem","isLoggedIn","token","getItem","expiry","JSON","parse","atob","split","exp","Math","floor","Date","getTime","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\elabe\\Desktop\\ThalassemiaFront\\src\\app\\services\\userback.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { User } from 'src/app/models/User';\r\nimport { Role } from '../models/Role';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserbackService {\r\n\r\n  private apiUrl = 'https://localhost:7129/api/Users';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  addUser(user: User): Observable<HttpResponse<any>> {\r\n    return this.http.post<any>(`${this.apiUrl}/addUser`, user, { observe: 'response' });\r\n  }\r\n\r\n  getUsers(): Observable<User[]> {\r\n    console.log(this.http.get<User[]>(this.apiUrl));\r\n        return this.http.get<User[]>(this.apiUrl);\r\n  }\r\n  GetRole(): Observable<Role[]> {\r\n    return this.http.get<Role[]>('https://localhost:7129/api/Users/get/role');\r\n  }\r\n  login(username: string, password: string): Observable<any> {\r\n    const body = { username, password };\r\n    return this.http.post<any>(`${this.apiUrl}/login`, body);\r\n  }\r\n  logout(): void {\r\n    localStorage.removeItem('authToken'); // Remove token when logging out\r\n    console.log('User logged out');\r\n  }\r\n  isLoggedIn(): boolean {\r\n    const token = localStorage.getItem('authToken');\r\n    if (!token) return false;\r\n  \r\n    const expiry = (JSON.parse(atob(token.split('.')[1]))).exp; // Decode the token to get expiry\r\n    return (Math.floor((new Date).getTime() / 1000)) < expiry; // Check if current time is less than expiry\r\n  }\r\n}\r\n"],"mappings":";;AASA,OAAM,MAAOA,eAAe;EAI1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,kCAAkC;EAEX;EAExCC,OAAOA,CAACC,IAAU;IAChB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAM,GAAG,IAAI,CAACH,MAAM,UAAU,EAAEE,IAAI,EAAE;MAAEE,OAAO,EAAE;IAAU,CAAE,CAAC;EACrF;EAEAC,QAAQA,CAAA;IACNC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,IAAI,CAACS,GAAG,CAAS,IAAI,CAACR,MAAM,CAAC,CAAC;IAC3C,OAAO,IAAI,CAACD,IAAI,CAACS,GAAG,CAAS,IAAI,CAACR,MAAM,CAAC;EAC/C;EACAS,OAAOA,CAAA;IACL,OAAO,IAAI,CAACV,IAAI,CAACS,GAAG,CAAS,2CAA2C,CAAC;EAC3E;EACAE,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,MAAMC,IAAI,GAAG;MAAEF,QAAQ;MAAEC;IAAQ,CAAE;IACnC,OAAO,IAAI,CAACb,IAAI,CAACI,IAAI,CAAM,GAAG,IAAI,CAACH,MAAM,QAAQ,EAAEa,IAAI,CAAC;EAC1D;EACAC,MAAMA,CAAA;IACJC,YAAY,CAACC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;IACtCV,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;EAChC;EACAU,UAAUA,CAAA;IACR,MAAMC,KAAK,GAAGH,YAAY,CAACI,OAAO,CAAC,WAAW,CAAC;IAC/C,IAAI,CAACD,KAAK,EAAE,OAAO,KAAK;IAExB,MAAME,MAAM,GAAIC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,KAAK,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAEC,GAAG,CAAC,CAAC;IAC5D,OAAQC,IAAI,CAACC,KAAK,CAAE,IAAIC,IAAI,CAAJ,CAAI,CAAEC,OAAO,EAAE,GAAG,IAAI,CAAC,GAAIT,MAAM,CAAC,CAAC;EAC7D;;;AA/BWvB,eAAe,C;mBAAfA,eAAe,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAfpC,eAAe,C;SAAfA,eAAe;EAAAqC,OAAA,EAAfrC,eAAe,CAAAsC,IAAA;EAAAC,UAAA,EAFd;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}