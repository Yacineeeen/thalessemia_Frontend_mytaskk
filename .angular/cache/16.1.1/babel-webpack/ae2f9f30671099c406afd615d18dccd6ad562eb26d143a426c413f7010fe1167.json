{"ast":null,"code":"import { InfectionPulmonaire } from 'src/app/models/InfectionPulmonaire';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/pulmonaire.service\";\nexport class PulmonaireComponent {\n  constructor(PulmonaireService) {\n    this.PulmonaireService = PulmonaireService;\n    this.complications = [new InfectionPulmonaire()];\n    this.errorMessage = '';\n  }\n  addComplication() {\n    this.complications.push(new InfectionPulmonaire());\n  }\n  onSubmit() {\n    for (let complication of this.complications) {\n      this.PulmonaireService.addpul(complication).subscribe(response => {\n        console.log('Complication added successfully', response);\n        this.errorMessage = '';\n      }, error => {\n        console.error('Error adding Complication', error);\n        this.errorMessage = error.error.title;\n        if (error.error.errors) {\n          for (const [field, errors] of Object.entries(error.error.errors)) {\n            console.error(`Validation error for ${field}:`, errors);\n          }\n        }\n      });\n    }\n  }\n}\nPulmonaireComponent.ɵfac = function PulmonaireComponent_Factory(t) {\n  return new (t || PulmonaireComponent)(i0.ɵɵdirectiveInject(i1.PulmonaireService));\n};\nPulmonaireComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PulmonaireComponent,\n  selectors: [[\"app-pulmonaire\"]],\n  decls: 2,\n  vars: 0,\n  template: function PulmonaireComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"pulmonaire works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["InfectionPulmonaire","PulmonaireComponent","constructor","PulmonaireService","complications","errorMessage","addComplication","push","onSubmit","complication","addpul","subscribe","response","console","log","error","title","errors","field","Object","entries","i0","ɵɵdirectiveInject","i1","selectors","decls","vars","template","PulmonaireComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\elabe\\Desktop\\ThalassemiaFront\\src\\app\\pages\\pulmonaire\\pulmonaire.component.ts","C:\\Users\\elabe\\Desktop\\ThalassemiaFront\\src\\app\\pages\\pulmonaire\\pulmonaire.component.html"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component } from '@angular/core';\r\nimport { InfectionPulmonaire } from 'src/app/models/InfectionPulmonaire';\r\nimport { PulmonaireService } from 'src/app/services/pulmonaire.service';\r\n\r\n@Component({\r\n  selector: 'app-pulmonaire',\r\n  templateUrl: './pulmonaire.component.html',\r\n  styleUrls: ['./pulmonaire.component.css']\r\n})\r\nexport class PulmonaireComponent {\r\n  complications: InfectionPulmonaire[] = [new InfectionPulmonaire()];\r\n  errorMessage: string = '';\r\n\r\n  constructor(private PulmonaireService: PulmonaireService) {}\r\n\r\n  addComplication() {\r\n    this.complications.push(new InfectionPulmonaire());\r\n  }\r\n\r\n  onSubmit() {\r\n    for (let complication of this.complications) {\r\n      this.PulmonaireService.addpul(complication).subscribe(\r\n        response => {\r\n          console.log('Complication added successfully', response);\r\n          this.errorMessage = '';\r\n        },\r\n        (error: HttpErrorResponse) => {\r\n          console.error('Error adding Complication', error);\r\n          this.errorMessage = error.error.title;\r\n          if (error.error.errors) {\r\n            for (const [field, errors] of Object.entries(error.error.errors)) {\r\n              console.error(`Validation error for ${field}:`, errors);\r\n            }\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n","<p>pulmonaire works!</p>\r\n"],"mappings":"AAEA,SAASA,mBAAmB,QAAQ,oCAAoC;;;AAQxE,OAAM,MAAOC,mBAAmB;EAI9BC,YAAoBC,iBAAoC;IAApC,KAAAA,iBAAiB,GAAjBA,iBAAiB;IAHrC,KAAAC,aAAa,GAA0B,CAAC,IAAIJ,mBAAmB,EAAE,CAAC;IAClE,KAAAK,YAAY,GAAW,EAAE;EAEkC;EAE3DC,eAAeA,CAAA;IACb,IAAI,CAACF,aAAa,CAACG,IAAI,CAAC,IAAIP,mBAAmB,EAAE,CAAC;EACpD;EAEAQ,QAAQA,CAAA;IACN,KAAK,IAAIC,YAAY,IAAI,IAAI,CAACL,aAAa,EAAE;MAC3C,IAAI,CAACD,iBAAiB,CAACO,MAAM,CAACD,YAAY,CAAC,CAACE,SAAS,CACnDC,QAAQ,IAAG;QACTC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEF,QAAQ,CAAC;QACxD,IAAI,CAACP,YAAY,GAAG,EAAE;MACxB,CAAC,EACAU,KAAwB,IAAI;QAC3BF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjD,IAAI,CAACV,YAAY,GAAGU,KAAK,CAACA,KAAK,CAACC,KAAK;QACrC,IAAID,KAAK,CAACA,KAAK,CAACE,MAAM,EAAE;UACtB,KAAK,MAAM,CAACC,KAAK,EAAED,MAAM,CAAC,IAAIE,MAAM,CAACC,OAAO,CAACL,KAAK,CAACA,KAAK,CAACE,MAAM,CAAC,EAAE;YAChEJ,OAAO,CAACE,KAAK,CAAC,wBAAwBG,KAAK,GAAG,EAAED,MAAM,CAAC;;;MAG7D,CAAC,CACF;;EAEL;;AA5BWhB,mBAAmB,C;mBAAnBA,mBAAmB,EAAAoB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAApB,iBAAA;AAAA;AAAnBF,mBAAmB,C;QAAnBA,mBAAmB;EAAAuB,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,QAAA,WAAAC,6BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCVhCR,EAAA,CAAAU,cAAA,QAAG;MAAAV,EAAA,CAAAW,MAAA,wBAAiB;MAAAX,EAAA,CAAAY,YAAA,EAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}