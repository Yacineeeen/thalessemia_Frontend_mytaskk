{"ast":null,"code":"import { ComplicationCoeur } from 'src/app/models/ComplicationCoeur';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/coeurservice.service\";\nimport * as i2 from \"@angular/router\";\nexport class ComplicationcoeurComponent {\n  constructor(coeurService, router) {\n    this.coeurService = coeurService;\n    this.router = router;\n    this.ComplicationCoeur = new ComplicationCoeur();\n    this.errorMessage = '';\n  }\n  formatDateToYYYYMMDD(date) {\n    return date.toISOString().split('T')[0];\n  }\n  onSubmit() {\n    const now = new Date();\n    this.ComplicationCoeur.DateEchocardiographie = this.formatDateToYYYYMMDD(now); // Format `yyyy-MM-dd`\n    if (this.ComplicationCoeur.DateEchocardiographie) {\n      this.ComplicationCoeur.DateEchocardiographie = this.formatDateToYYYYMMDD(new Date(this.ComplicationCoeur.DateEchocardiographie));\n    } else {\n      this.ComplicationCoeur.DateEchocardiographie = this.formatDateToYYYYMMDD(now);\n    }\n    // Convertir les dates en format ISO 8601 avant de les envoyer au backend\n    const complicationToSend = {\n      ...this.ComplicationCoeur,\n      DateEchocardiographie: new Date(this.ComplicationCoeur.DateEchocardiographie).toISOString()\n    };\n    this.coeurService.addcompcoeur(complicationToSend).subscribe(response => {\n      console.log('Complication added successfully', response);\n      this.errorMessage = '';\n      this.router.navigate(['admin/IrmCoeur']); // Navigate to the desired route\n    }, error => {\n      console.error('Error adding Complication', error);\n      this.errorMessage = error.error.title;\n      if (error.error.errors) {\n        for (const [field, errors] of Object.entries(error.error.errors)) {\n          console.error(`Validation error for ${field}:`, errors);\n        }\n      }\n    });\n  }\n}\nComplicationcoeurComponent.ɵfac = function ComplicationcoeurComponent_Factory(t) {\n  return new (t || ComplicationcoeurComponent)(i0.ɵɵdirectiveInject(i1.CoeurserviceService), i0.ɵɵdirectiveInject(i2.Router));\n};\nComplicationcoeurComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ComplicationcoeurComponent,\n  selectors: [[\"app-complicationcoeur\"]],\n  decls: 0,\n  vars: 0,\n  template: function ComplicationcoeurComponent_Template(rf, ctx) {},\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["ComplicationCoeur","ComplicationcoeurComponent","constructor","coeurService","router","errorMessage","formatDateToYYYYMMDD","date","toISOString","split","onSubmit","now","Date","DateEchocardiographie","complicationToSend","addcompcoeur","subscribe","response","console","log","navigate","error","title","errors","field","Object","entries","i0","ɵɵdirectiveInject","i1","CoeurserviceService","i2","Router","selectors","decls","vars","template","ComplicationcoeurComponent_Template","rf","ctx","styles"],"sources":["C:\\Users\\elabe\\Desktop\\ThalassemiaFront\\src\\app\\pages\\complicationcoeur\\complicationcoeur.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { ComplicationCoeur } from 'src/app/models/ComplicationCoeur';\r\nimport { CoeurserviceService } from 'src/app/services/coeurservice.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-complicationcoeur',\r\n  templateUrl: './complicationcoeur.component.html',\r\n  styleUrls: ['./complicationcoeur.component.css']\r\n})\r\nexport class ComplicationcoeurComponent {\r\n  ComplicationCoeur: ComplicationCoeur = new ComplicationCoeur();\r\n  errorMessage: string = '';\r\n\r\n  constructor(private coeurService: CoeurserviceService, private router: Router) {}\r\n  private formatDateToYYYYMMDD(date: Date): string {\r\n    return date.toISOString().split('T')[0];\r\n  }\r\n\r\n  onSubmit() {\r\n    const now = new Date();\r\n    this.ComplicationCoeur.DateEchocardiographie = this.formatDateToYYYYMMDD(now);  // Format `yyyy-MM-dd`\r\n  \r\n    if (this.ComplicationCoeur.DateEchocardiographie) {\r\n      this.ComplicationCoeur.DateEchocardiographie = this.formatDateToYYYYMMDD(new Date(this.ComplicationCoeur.DateEchocardiographie));\r\n    } else {\r\n      this.ComplicationCoeur.DateEchocardiographie = this.formatDateToYYYYMMDD(now); \r\n    }\r\n  \r\n    // Convertir les dates en format ISO 8601 avant de les envoyer au backend\r\n    const complicationToSend = {\r\n      ...this.ComplicationCoeur,\r\n      DateEchocardiographie: new Date(this.ComplicationCoeur.DateEchocardiographie).toISOString(),\r\n    };\r\n  \r\n    \r\n    this.coeurService.addcompcoeur(complicationToSend).subscribe(\r\n      response => {\r\n        console.log('Complication added successfully', response);\r\n        this.errorMessage = '';\r\n        this.router.navigate(['admin/IrmCoeur']); // Navigate to the desired route\r\n\r\n      },\r\n      (error: HttpErrorResponse) => {\r\n        console.error('Error adding Complication', error);\r\n        this.errorMessage = error.error.title;\r\n        if (error.error.errors) {\r\n          for (const [field, errors] of Object.entries(error.error.errors)) {\r\n            console.error(`Validation error for ${field}:`, errors);\r\n          }\r\n        }\r\n      }\r\n    );\r\n  }\r\n  \r\n}\r\n"],"mappings":"AACA,SAASA,iBAAiB,QAAQ,kCAAkC;;;;AAUpE,OAAM,MAAOC,0BAA0B;EAIrCC,YAAoBC,YAAiC,EAAUC,MAAc;IAAzD,KAAAD,YAAY,GAAZA,YAAY;IAA+B,KAAAC,MAAM,GAANA,MAAM;IAHrE,KAAAJ,iBAAiB,GAAsB,IAAIA,iBAAiB,EAAE;IAC9D,KAAAK,YAAY,GAAW,EAAE;EAEuD;EACxEC,oBAAoBA,CAACC,IAAU;IACrC,OAAOA,IAAI,CAACC,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACzC;EAEAC,QAAQA,CAAA;IACN,MAAMC,GAAG,GAAG,IAAIC,IAAI,EAAE;IACtB,IAAI,CAACZ,iBAAiB,CAACa,qBAAqB,GAAG,IAAI,CAACP,oBAAoB,CAACK,GAAG,CAAC,CAAC,CAAE;IAEhF,IAAI,IAAI,CAACX,iBAAiB,CAACa,qBAAqB,EAAE;MAChD,IAAI,CAACb,iBAAiB,CAACa,qBAAqB,GAAG,IAAI,CAACP,oBAAoB,CAAC,IAAIM,IAAI,CAAC,IAAI,CAACZ,iBAAiB,CAACa,qBAAqB,CAAC,CAAC;KACjI,MAAM;MACL,IAAI,CAACb,iBAAiB,CAACa,qBAAqB,GAAG,IAAI,CAACP,oBAAoB,CAACK,GAAG,CAAC;;IAG/E;IACA,MAAMG,kBAAkB,GAAG;MACzB,GAAG,IAAI,CAACd,iBAAiB;MACzBa,qBAAqB,EAAE,IAAID,IAAI,CAAC,IAAI,CAACZ,iBAAiB,CAACa,qBAAqB,CAAC,CAACL,WAAW;KAC1F;IAGD,IAAI,CAACL,YAAY,CAACY,YAAY,CAACD,kBAAkB,CAAC,CAACE,SAAS,CAC1DC,QAAQ,IAAG;MACTC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEF,QAAQ,CAAC;MACxD,IAAI,CAACZ,YAAY,GAAG,EAAE;MACtB,IAAI,CAACD,MAAM,CAACgB,QAAQ,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAE5C,CAAC,EACAC,KAAwB,IAAI;MAC3BH,OAAO,CAACG,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,IAAI,CAAChB,YAAY,GAAGgB,KAAK,CAACA,KAAK,CAACC,KAAK;MACrC,IAAID,KAAK,CAACA,KAAK,CAACE,MAAM,EAAE;QACtB,KAAK,MAAM,CAACC,KAAK,EAAED,MAAM,CAAC,IAAIE,MAAM,CAACC,OAAO,CAACL,KAAK,CAACA,KAAK,CAACE,MAAM,CAAC,EAAE;UAChEL,OAAO,CAACG,KAAK,CAAC,wBAAwBG,KAAK,GAAG,EAAED,MAAM,CAAC;;;IAG7D,CAAC,CACF;EACH;;AA3CWtB,0BAA0B,C;mBAA1BA,0BAA0B,EAAA0B,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,mBAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;AAA1B/B,0BAA0B,C;QAA1BA,0BAA0B;EAAAgC,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,QAAA,WAAAC,oCAAAC,EAAA,EAAAC,GAAA;EAAAC,MAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}