{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ComplicationCoeur } from 'src/app/models/ComplicationCoeur';\nexport let ComplicationcoeurComponent = class ComplicationcoeurComponent {\n  constructor(coeurService) {\n    this.coeurService = coeurService;\n    this.ComplicationCoeur = new ComplicationCoeur();\n    this.errorMessage = '';\n  }\n  formatDateToYYYYMMDD(date) {\n    return date.toISOString().split('T')[0];\n  }\n  onSubmit() {\n    const now = new Date();\n    this.ComplicationCoeur.DateEchocardiographie = this.formatDateToYYYYMMDD(now); // Format `yyyy-MM-dd`\n    if (this.ComplicationCoeur.DateEchocardiographie) {\n      this.ComplicationCoeur.DateEchocardiographie = this.formatDateToYYYYMMDD(new Date(this.ComplicationCoeur.DateEchocardiographie));\n    } else {\n      this.ComplicationCoeur.DateEchocardiographie = this.formatDateToYYYYMMDD(now);\n    }\n    // Convertir les dates en format ISO 8601 avant de les envoyer au backend\n    const complicationToSend = {\n      ...this.ComplicationCoeur,\n      DateEchocardiographie: new Date(this.ComplicationCoeur.DateEchocardiographie).toISOString()\n    };\n    this.coeurService.addcompcoeur(complicationToSend).subscribe(response => {\n      console.log('Complication added successfully', response);\n      this.errorMessage = '';\n    }, error => {\n      console.error('Error adding Complication', error);\n      this.errorMessage = error.error.title;\n      if (error.error.errors) {\n        for (const [field, errors] of Object.entries(error.error.errors)) {\n          console.error(`Validation error for ${field}:`, errors);\n        }\n      }\n    });\n  }\n};\nComplicationcoeurComponent = __decorate([Component({\n  selector: 'app-complicationcoeur',\n  templateUrl: './complicationcoeur.component.html',\n  styleUrls: ['./complicationcoeur.component.css']\n})], ComplicationcoeurComponent);","map":{"version":3,"names":["Component","ComplicationCoeur","ComplicationcoeurComponent","constructor","coeurService","errorMessage","formatDateToYYYYMMDD","date","toISOString","split","onSubmit","now","Date","DateEchocardiographie","complicationToSend","addcompcoeur","subscribe","response","console","log","error","title","errors","field","Object","entries","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\elabe\\Desktop\\ThalassemiaFront\\src\\app\\pages\\complicationcoeur\\complicationcoeur.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { ComplicationCoeur } from 'src/app/models/ComplicationCoeur';\r\nimport { CoeurserviceService } from 'src/app/services/coeurservice.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-complicationcoeur',\r\n  templateUrl: './complicationcoeur.component.html',\r\n  styleUrls: ['./complicationcoeur.component.css']\r\n})\r\nexport class ComplicationcoeurComponent {\r\n  ComplicationCoeur: ComplicationCoeur = new ComplicationCoeur();\r\n  errorMessage: string = '';\r\n\r\n  constructor(private coeurService: CoeurserviceService) {}\r\n  private formatDateToYYYYMMDD(date: Date): string {\r\n    return date.toISOString().split('T')[0];\r\n  }\r\n\r\n  onSubmit() {\r\n    const now = new Date();\r\n    this.ComplicationCoeur.DateEchocardiographie = this.formatDateToYYYYMMDD(now);  // Format `yyyy-MM-dd`\r\n  \r\n    if (this.ComplicationCoeur.DateEchocardiographie) {\r\n      this.ComplicationCoeur.DateEchocardiographie = this.formatDateToYYYYMMDD(new Date(this.ComplicationCoeur.DateEchocardiographie));\r\n    } else {\r\n      this.ComplicationCoeur.DateEchocardiographie = this.formatDateToYYYYMMDD(now); \r\n    }\r\n  \r\n    // Convertir les dates en format ISO 8601 avant de les envoyer au backend\r\n    const complicationToSend = {\r\n      ...this.ComplicationCoeur,\r\n      DateEchocardiographie: new Date(this.ComplicationCoeur.DateEchocardiographie).toISOString(),\r\n    };\r\n  \r\n    \r\n    this.coeurService.addcompcoeur(complicationToSend).subscribe(\r\n      response => {\r\n        console.log('Complication added successfully', response);\r\n        this.errorMessage = '';\r\n      },\r\n      (error: HttpErrorResponse) => {\r\n        console.error('Error adding Complication', error);\r\n        this.errorMessage = error.error.title;\r\n        if (error.error.errors) {\r\n          for (const [field, errors] of Object.entries(error.error.errors)) {\r\n            console.error(`Validation error for ${field}:`, errors);\r\n          }\r\n        }\r\n      }\r\n    );\r\n  }\r\n  \r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,iBAAiB,QAAQ,kCAAkC;AAS7D,WAAMC,0BAA0B,GAAhC,MAAMA,0BAA0B;EAIrCC,YAAoBC,YAAiC;IAAjC,KAAAA,YAAY,GAAZA,YAAY;IAHhC,KAAAH,iBAAiB,GAAsB,IAAIA,iBAAiB,EAAE;IAC9D,KAAAI,YAAY,GAAW,EAAE;EAE+B;EAChDC,oBAAoBA,CAACC,IAAU;IACrC,OAAOA,IAAI,CAACC,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACzC;EAEAC,QAAQA,CAAA;IACN,MAAMC,GAAG,GAAG,IAAIC,IAAI,EAAE;IACtB,IAAI,CAACX,iBAAiB,CAACY,qBAAqB,GAAG,IAAI,CAACP,oBAAoB,CAACK,GAAG,CAAC,CAAC,CAAE;IAEhF,IAAI,IAAI,CAACV,iBAAiB,CAACY,qBAAqB,EAAE;MAChD,IAAI,CAACZ,iBAAiB,CAACY,qBAAqB,GAAG,IAAI,CAACP,oBAAoB,CAAC,IAAIM,IAAI,CAAC,IAAI,CAACX,iBAAiB,CAACY,qBAAqB,CAAC,CAAC;KACjI,MAAM;MACL,IAAI,CAACZ,iBAAiB,CAACY,qBAAqB,GAAG,IAAI,CAACP,oBAAoB,CAACK,GAAG,CAAC;;IAG/E;IACA,MAAMG,kBAAkB,GAAG;MACzB,GAAG,IAAI,CAACb,iBAAiB;MACzBY,qBAAqB,EAAE,IAAID,IAAI,CAAC,IAAI,CAACX,iBAAiB,CAACY,qBAAqB,CAAC,CAACL,WAAW;KAC1F;IAGD,IAAI,CAACJ,YAAY,CAACW,YAAY,CAACD,kBAAkB,CAAC,CAACE,SAAS,CAC1DC,QAAQ,IAAG;MACTC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEF,QAAQ,CAAC;MACxD,IAAI,CAACZ,YAAY,GAAG,EAAE;IACxB,CAAC,EACAe,KAAwB,IAAI;MAC3BF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,IAAI,CAACf,YAAY,GAAGe,KAAK,CAACA,KAAK,CAACC,KAAK;MACrC,IAAID,KAAK,CAACA,KAAK,CAACE,MAAM,EAAE;QACtB,KAAK,MAAM,CAACC,KAAK,EAAED,MAAM,CAAC,IAAIE,MAAM,CAACC,OAAO,CAACL,KAAK,CAACA,KAAK,CAACE,MAAM,CAAC,EAAE;UAChEJ,OAAO,CAACE,KAAK,CAAC,wBAAwBG,KAAK,GAAG,EAAED,MAAM,CAAC;;;IAG7D,CAAC,CACF;EACH;CAED;AA3CYpB,0BAA0B,GAAAwB,UAAA,EALtC1B,SAAS,CAAC;EACT2B,QAAQ,EAAE,uBAAuB;EACjCC,WAAW,EAAE,oCAAoC;EACjDC,SAAS,EAAE,CAAC,mCAAmC;CAChD,CAAC,C,EACW3B,0BAA0B,CA2CtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}