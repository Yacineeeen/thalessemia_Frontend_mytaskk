{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let UpdatecompcoeurComponent = class UpdatecompcoeurComponent {\n  constructor(coeurService, router, route) {\n    this.coeurService = coeurService;\n    this.router = router;\n    this.route = route;\n    this.ComplicationCoeur = {};\n    this.errorMessage = '';\n  }\n  onDateChange(event) {\n    // event contains the new date value as a string\n    console.log('Date changed to:', event);\n  }\n  ngOnInit() {\n    this.route.paramMap.subscribe(params => {\n      const PatientID = params.get('PatientID');\n      if (PatientID) {\n        const id = parseInt(PatientID, 10);\n        if (!isNaN(id)) {\n          this.getComplicationCoeurById(id);\n        } else {\n          console.error('Invalid patient ID:', PatientID);\n        }\n      } else {\n        console.error('Patient ID is missing in route');\n      }\n    });\n  }\n  getComplicationCoeurById(id) {\n    this.coeurService.getComplicationCoeurById(id).subscribe(data => {\n      this.ComplicationCoeur = data;\n      // Optionally log the data to ensure it's correctly set\n      console.log('Formatted data:', this.ComplicationCoeur);\n      if (this.ComplicationCoeur && this.ComplicationCoeur.DateEchocardiographie) {\n        this.ComplicationCoeur.DateEchocardiographie = this.formatDate(this.ComplicationCoeur.DateEchocardiographie);\n      }\n    }, error => {\n      this.errorMessage = error.message;\n      console.error('Error fetching complication data:', error);\n    });\n  }\n  formatDate(date) {\n    const d = new Date(date);\n    return d.toISOString().split('T')[0]; // Format to 'yyyy-MM-dd'\n  }\n\n  onSubmit() {\n    const patientID = parseInt(this.route.snapshot.paramMap.get('PatientID'), 10);\n    if (!isNaN(patientID)) {\n      this.coeurService.update(patientID, this.ComplicationCoeur).subscribe(response => {\n        console.log('Update successful', response);\n        //this.router.navigate(['/']); // Adjust this to your desired route after successful update\n      }, error => {\n        this.errorMessage = error.message;\n        console.error('Error updating complication data:', error);\n      });\n    } else {\n      console.error('Invalid patient ID:', patientID);\n    }\n  }\n};\nUpdatecompcoeurComponent = __decorate([Component({\n  selector: 'app-updatecompcoeur',\n  templateUrl: './updatecompcoeur.component.html',\n  styleUrls: ['./updatecompcoeur.component.css']\n})], UpdatecompcoeurComponent);","map":{"version":3,"names":["Component","UpdatecompcoeurComponent","constructor","coeurService","router","route","ComplicationCoeur","errorMessage","onDateChange","event","console","log","ngOnInit","paramMap","subscribe","params","PatientID","get","id","parseInt","isNaN","getComplicationCoeurById","error","data","DateEchocardiographie","formatDate","message","date","d","Date","toISOString","split","onSubmit","patientID","snapshot","update","response","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\elabe\\Desktop\\ThalassemiaFront\\src\\app\\pages\\updatecompcoeur\\updatecompcoeur.component.ts"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ComplicationCoeur } from 'src/app/models/ComplicationCoeur';\r\nimport { CoeurserviceService } from 'src/app/services/coeurservice.service';\r\n\r\n@Component({\r\n  selector: 'app-updatecompcoeur',\r\n  templateUrl: './updatecompcoeur.component.html',\r\n  styleUrls: ['./updatecompcoeur.component.css']\r\n})\r\nexport class UpdatecompcoeurComponent {\r\n  ComplicationCoeur: any= {};\r\n  errorMessage: string = '';\r\n\r\n  constructor(\r\n    private coeurService: CoeurserviceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  onDateChange(event: any): void {\r\n    // event contains the new date value as a string\r\n    console.log('Date changed to:', event);\r\n  }\r\n  ngOnInit(): void {\r\n    this.route.paramMap.subscribe(params => {\r\n      const PatientID = params.get('PatientID');\r\n      if (PatientID) {\r\n        const id = parseInt(PatientID, 10);\r\n        if (!isNaN(id)) {\r\n          this.getComplicationCoeurById(id);\r\n        } else {\r\n          console.error('Invalid patient ID:', PatientID);\r\n        }\r\n      } else {\r\n        console.error('Patient ID is missing in route');\r\n      }\r\n    });\r\n  }\r\n  \r\n  private getComplicationCoeurById(id: number) {\r\n    this.coeurService.getComplicationCoeurById(id).subscribe(\r\n      (data: ComplicationCoeur) => {\r\n        this.ComplicationCoeur = data;\r\n        // Optionally log the data to ensure it's correctly set\r\n        console.log('Formatted data:', this.ComplicationCoeur);\r\n        if (this.ComplicationCoeur && this.ComplicationCoeur.DateEchocardiographie) {\r\n          this.ComplicationCoeur.DateEchocardiographie = this.formatDate(this.ComplicationCoeur.DateEchocardiographie);\r\n        }\r\n      },\r\n      (error: HttpErrorResponse) => {\r\n        this.errorMessage = error.message;\r\n        console.error('Error fetching complication data:', error);\r\n      }\r\n    );\r\n  }\r\n  \r\n  private formatDate(date: string): string {\r\n    const d = new Date(date);\r\n    return d.toISOString().split('T')[0]; // Format to 'yyyy-MM-dd'\r\n  }\r\n  \r\n  \r\n\r\n  onSubmit() {\r\n    const patientID = parseInt(this.route.snapshot.paramMap.get('PatientID')!, 10);\r\n    if (!isNaN(patientID)) {\r\n        this.coeurService.update(patientID, this.ComplicationCoeur).subscribe(\r\n            response => {\r\n                console.log('Update successful', response);\r\n                //this.router.navigate(['/']); // Adjust this to your desired route after successful update\r\n            },\r\n            (error: HttpErrorResponse) => {\r\n                this.errorMessage = error.message;\r\n                console.error('Error updating complication data:', error);\r\n            }\r\n        );\r\n    } else {\r\n        console.error('Invalid patient ID:', patientID);\r\n    }\r\n}\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}